package ExploitsUtil;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.Statement;

import common.DataBase;
import utils.Utils;


public class BruteForce implements ExploitLevel {
	private DataBase database;
	private Utils utils;
	private Connection conn;
	private Statement stmt;
	private ResultSet rs;
	
	public BruteForce() {
		try {
			this.database = new DataBase();
			this.utils = new Utils();
			this.conn = DriverManager.getConnection(database.getDbURL() + database.getDbName(), database.getDbID(), database.getDbPassword());
			
		} catch (Exception e) {
			e.printStackTrace();
		}
	}
	
	@Override
	public int low(Object...params) {
		if (params.length == 0) { return -1; }
		
		String hashedPassword = utils.hashPassword(params[1].toString(), database.getProperties().getProperty("pw.encrypt.algorithm"));
		
		try {
			stmt = conn.createStatement();
			
			String query = "SELECT * FROM user WHERE userID = '" + params[0].toString() + "' AND userPassword = '" + hashedPassword + "'";
			rs = stmt.executeQuery(query);
			return rs.next() ? 1 : -1;
		} catch (Exception e) {
			e.printStackTrace();
		} finally {
			try {
				if (rs != null) rs.close();
				if (stmt != null) stmt.close();
				if (conn != null) conn.close();
			} catch (Exception e) {
				e .printStackTrace();
			}
		}
		
		return -1;
	}

	@Override
	public int hard(Object... params) {
		if (params.length == 0) { return -1; }
		
		String user = params[0].toString();
		String password = params[1].toString();
		
		// SQL Injection 방지
		user = user.replaceAll("'", "''");
		password = password.replaceAll("'", "''");
		
		String hashedPassword = utils.hashPassword(password, database.getProperties().getProperty("pw.encrypt.algorithm"));
		
		try {
			stmt = conn.createStatement();
			
			String query = "SELECT * FROM user WHERE userID = '" + params[0].toString() + "' AND userPassword = '" + hashedPassword + "'";
			rs = stmt.executeQuery(query);
			return rs.next() ? 1 : -1;
		} catch (Exception e) {
			e.printStackTrace();
		} finally {
			try {
				if (rs != null) rs.close();
				if (stmt != null) stmt.close();
				if (conn != null) conn.close();
			} catch (Exception e) {
				e .printStackTrace();
			}
		}
		
		return -1;
	}
}
