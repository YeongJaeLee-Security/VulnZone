package ExploitsUtil;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;

import ExploitsParam.StoredXssParams;
import common.DataBase;

public class StoredXss implements ExploitLevel<Void, StoredXssParams> {
	
	private DataBase database;
	private Connection conn;
	private PreparedStatement pstmt;
	private ResultSet rs = null;
	
	public StoredXss() {
		try {
			this.database = new DataBase();
			this.conn = DriverManager.getConnection(database.getDbURL() + database.getDbName() + "?useUnicode=true&characterEncoding=UTF-8", database.getDbID(), database.getDbPassword());
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	@Override
	public Void easy(StoredXssParams params) {
		if (params == null) { return null; }
		
		String method = params.getMethod();
		String action = params.getAction();
		
		if (action != null && action.equals("Sign Guestbook") && method.equalsIgnoreCase("POST")) {
			String name = params.getName();
			String message = params.getMessage();
			
			message = message != null ? message.trim() : message;
			name = name != null ? name.trim() : name;
			
			message = message != null ? message.replaceAll("'", "''") : "";
			name = name != null ? name.replaceAll("'", "''") : "";
			
			try {
				// XSS 실습 공간이라 SQL Injection은 prepared statement로 방지
				String query = "INSERT INTO " + database.getXssTableName() + " (comment, name) VALUES(?, ?)";
				
				pstmt = conn.prepareStatement(query);
				pstmt.setString(1, message);
				pstmt.setString(2, name);
				pstmt.executeUpdate();
				
				return null;
			} catch(Exception e) {
				e.printStackTrace();
			} finally {
				try {
					if (pstmt != null) pstmt.close();
				} catch (SQLException e)  {
					e.printStackTrace();
				}
			}
		} 
		
		return null;
	}

	@Override
	public Void hard(StoredXssParams params) {
		if (params == null) { return null; }
		
		String method = params.getMethod();
		String action = params.getAction();
		
		if (action != null && action.equals("Sign Guestbook") && method.equalsIgnoreCase("POST")) {
			String name = params.getName();
			String message = params.getMessage();
			
			message = message != null ? message.trim() : message;
			name = name != null ? name.trim() : name;
			
			if (message != null) {
				message = message.replaceAll("<", "&lt;").replaceAll(">", "&gt;");
				message = message.replaceAll("'", "\\\\'");
				message = message.replaceAll("\"", "\\\\\"");
				message = message.replaceAll("&", "&amp;");
			}
			
			if (name != null) {
				name = name.replace("<script>", "");
				name = name.replaceAll("'", "\\\\'");
			}
			
			try {
				String query = "INSERT INTO " + database.getXssTableName() + " (comment, name) VALUES(?, ?)";
				
				pstmt = conn.prepareStatement(query);
				pstmt.setString(1, message);
				pstmt.setString(2, name);
				pstmt.executeUpdate();
				
				return null;
			} catch (Exception e) {
				e.printStackTrace();
			} finally {
				try {
					if (pstmt != null) pstmt.close();
				} catch (SQLException e) {
					e.printStackTrace();
				}
			} 
		} 
		
		return null;
	}
	
	public void clearGuestbook() {
		try {
			String query = "TRUNCATE TABLE " + database.getXssTableName();
			pstmt = conn.prepareStatement(query);
			pstmt.executeUpdate();
		} catch (Exception e) {
			e.printStackTrace();
		} finally {
			try {
				if (pstmt != null) pstmt.close();
			} catch (SQLException e) {
				e.printStackTrace();
			}
		}
	}
	
	public String getGuestbook() {
		try {
			StringBuilder stringBuilder = new StringBuilder();
			String query = "SELECT name, comment FROM " + database.getXssTableName();
			
			pstmt = conn.prepareStatement(query);
			rs = pstmt.executeQuery();
			
			while (rs.next()) {
				String name = rs.getString("name");
				String comment = rs.getString("comment");
				
				stringBuilder.append("<div id='guest_book'>")
				.append("<pre>")
				.append("Name : ").append(name).append("<br />")
				.append("Message : ").append(comment)
				.append("</pre>")
				.append("</div>").append("<br />");
			}
			
			return stringBuilder.toString();
		} catch (SQLException e) {
			e.printStackTrace();
		} finally {
			try {
				if (rs != null) rs.close();
				if (pstmt != null) pstmt.close();
			} catch (SQLException e) {
				e.printStackTrace();
			}
		}
		
		return null;
	}
}