package ExploitsUtil;

import java.io.InputStream;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.Statement;
import java.util.Properties;

import ExploitsParam.CaptchaParams;
import common.DataBase;
import utils.Utils;

public class Captcha implements ExploitLevel<String, CaptchaParams> {
	private String RecaptchaPublicKey = null;
	private Utils utils;
	private DataBase database;
	private Connection conn;
	private Statement stmt;

	public Captcha() {
		try {
			this.database = new DataBase();
			this.utils = new Utils();
			this.conn = DriverManager.getConnection(database.getDbURL() + database.getDbName(), database.getDbID(), database.getDbPassword());
		} catch (Exception e) {
			e.printStackTrace();
		}
	}
	
	/**
	 * 추후, impossible 단계에서 적용
	private boolean isValidCSRFtoken(CaptchaParams params) {
		String sessionToken = params.getcsrfToken();
		String requestToken = params.getRequest().getParameter("user_token");

		return sessionToken != null && sessionToken.equals(requestToken);
	}
	 **/

	public String getRecaptchaPublicKey() {
		if (this.RecaptchaPublicKey != null && !this.RecaptchaPublicKey.isEmpty()) {
			return this.RecaptchaPublicKey;
		}

		return null;
	}

	public boolean isRecaptchaEnable() {
		try {
			Properties properties = new Properties();
			InputStream inputStream = Captcha.class.getClassLoader().getResourceAsStream("config.properties");

			if (inputStream != null) {
				properties.load(inputStream);
				this.RecaptchaPublicKey = properties.getProperty("recaptcha.public_key");

				return this.RecaptchaPublicKey != null && !this.RecaptchaPublicKey.isEmpty();
			} 
		}	catch (Exception e) {
			e.printStackTrace();
		}

		return false;
	}

	private boolean isRecaptchaValid(String recaptchaResponse) {
		return recaptchaResponse != null && !recaptchaResponse.isEmpty();
	}

	@Override
	public String low(CaptchaParams params) {
		if (params == null) {
			return "Passwords did not match.";
		}
		
		String newPassword = params.getPassNew();
		String newPasswordConf = params.getPassConf();
		if (!utils.validatePassword(newPassword) || !utils.validatePassword(newPasswordConf)) {
			return null;
		}
		
		String step = params.getStep();
		if (step.equals("1")) {
			// Step 1 : CAPTCHA 검증
			String recaptchaResponse = params.getRecaptchaResponse();
			if (!isRecaptchaValid(recaptchaResponse)) {
				return "<pre style='color: red;'>The CAPTCHA was incorrect. Please try again.</pre>";
			}
			
			return "<pre style='color: red;'>You Passed the CAPTCHA! Click the button to confirm your changes.</pre>" +
				   "<form action='#' method='POST'>" +
				   "<input maxLength='20' type='hidden' name='step' value='2'>" +
				   "<input maxLength='20' type='hidden' name='newPassword' value='" + newPassword + "'>" +
				   "<input maxLength='20' type='hidden' name='newPasswordConfirm' value='" + newPasswordConf + "'>" +
				   "<input maxLength='20' type='submit' value='Confirm Change' name='change' class='btn btn-success'>" + 
				   "</from>";
		} else if (step.equals("2")) {
			// Step 2 : 비밀번호 변경
			if (newPassword != null && newPassword.equals(newPasswordConf)) {
				newPassword = newPassword.replaceAll("'", "\\'");
				String hashedPassword = utils.hashPassword(newPassword, database.getProperties().getProperty("pw.encrypt.algorithm"));
				String currentUser = params.getCurrentUser();
				// 원래는 escape 처리 해줘야 함
				String query = "UPDATE user SET userPassword = '" + hashedPassword + "' WHERE userID = '" + currentUser + "';";

				try {
					stmt = conn.createStatement();
					stmt.executeUpdate(query);

					return "Password Changed.";
				} catch (Exception e) {
					e.printStackTrace();
				}
			} else {
				return "Passwords did not match.";
			}
		}
		
		return "Passwords did not match.";
	}

	@Override
	public String hard(CaptchaParams params) {
		if (params == null) {
			return "Passwords did not match.";
		}
		
		String newPassword = params.getPassNew();
		String newPasswordConf = params.getPassConf();
		if (!utils.validatePassword(newPassword) || !utils.validatePassword(newPasswordConf)) {
			return null;
		}
		
		String step = params.getStep();
		if (step.equals("1")) {
			String recaptchaResponse = params.getRecaptchaResponse();
			if (!isRecaptchaValid(recaptchaResponse)) {
				return "<pre style='color: red;'>The CAPTCHA was incorrect. Please try again.</pre>";
			}
			
			return "<pre style='color: red;'>You Passed the CAPTCHA! Click the button to confirm your changes.</pre>" +
			   "<form action='#' method='POST'>" +
			   "<input maxLength='20' type='hidden' name='step' value='2'>" +
			   "<input maxLength='20' type='hidden' name='newPassword' value='" + newPassword + "'>" +
			   "<input maxLength='20' type='hidden' name='newPasswordConfirm' value='" + newPasswordConf + "'>" +
			   "<input maxLength='20' type='hidden' name='passed_captcha' value='true'>" +
			   "<input maxLength='20' type='submit' value='Confirm Change' name='change' class='btn btn-success'>" + 
			   "</form>";
		} else if (step.equals("2")) {
			String passedCaptcha = params.getPassedCaptcha();
			if (passedCaptcha == null || !passedCaptcha.equals("true")) {
				return "<pre style='color: red;'>You have not passed the CAPTCHA.</pre>";
			}
			
			if (newPassword != null && newPassword.equals(newPasswordConf)) {
				newPassword = newPassword.replaceAll("'", "\\'");
				
				String hashedPassword = utils.hashPassword(newPassword, database.getProperties().getProperty("pw.encrypt.algorithm"));
				String currentUser = params.getCurrentUser();
				// 원래는 escape 처리 해줘야 함
				String query = "UPDATE user SET userPassword = '" + hashedPassword + "' WHERE userID = '" + currentUser + "';";
				
				try {
					stmt = conn.createStatement();
					stmt.executeUpdate(query);
					
					return "Password Changed.";
				} catch (Exception e) {
					e.printStackTrace();
				}
			} else {
				return "Passwords did not match.";
			}
		}

		return "Passwords did not match.";
	}
}