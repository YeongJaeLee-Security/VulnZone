package ExploitsUtil;

import java.io.*;
import java.util.*;

public class CommandInjection implements ExploitLevel {
	private String os;
	private String cmd;
	private String encoding;
	
	public CommandInjection() {
		// windows or unix (linux)
		os = System.getProperty("os.name").toLowerCase();
		cmd = os.contains("win") ? "cmd /c ping " : "ping -c 4 ";
		encoding = os.contains("win") ? "MS949" : "UTF-8";	// 운영체제별 출력 인코딩 지정
	}

	@Override
	public Object low(Object... params) {
		if (params.length <= 0 || params == null) { return ""; }
		String target = params[0].toString(); // IP address
		cmd += target;
		
		StringBuilder result = new StringBuilder();
		
		try {
			ProcessBuilder processBuilder = new ProcessBuilder(cmd.split(" "));
	        
			Process process = processBuilder.start();
			
			BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(process.getInputStream(), encoding));
			String line;

			while ((line = bufferedReader.readLine()) != null) {
	            result.append(line).append("\n");
	        }
			
	        bufferedReader.close();
		} catch (Exception e) {
			e.printStackTrace();
		}

		return result.length() > 0 ? result.toString() : "";
	}

	@Override
	public Object hard(Object... params) {
		if (params.length <= 0 || params == null) { return ""; }

		String target = params[0].toString(); // IP address

		// Set blacklist
		Map<String, String> substitutions = new HashMap<>();
		substitutions.put("&&", "");
		substitutions.put(";", "");

		for (Map.Entry<String, String> entry : substitutions.entrySet()) {
			target = target.replace(entry.getKey(), entry.getValue());
		}
		
		cmd += target;
		
		StringBuilder result = new StringBuilder();
		
		try {
			ProcessBuilder processBuilder = new ProcessBuilder(cmd.split(" "));
			
			Process process = processBuilder.start();

			BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(process.getInputStream(), encoding));
			String line;

			while ((line = bufferedReader.readLine()) != null) {
	            result.append(line).append("\n");
	        }
			
	        bufferedReader.close();
		} catch (Exception e) {
			e.printStackTrace();
		}
		
		return result.length() > 0 ? result.toString() : "";
	}
}