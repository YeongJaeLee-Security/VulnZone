package ExploitsUtil;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.Statement;

import ExploitsParam.CSRFParams;
import common.DataBase;
import utils.Utils;

public class CSRF implements ExploitLevel<Integer, CSRFParams> {
	private DataBase database;
	private Utils utils;
	private Connection conn;
	private Statement stmt;

	public CSRF() {
		try {
			this.database = new DataBase();
			this.utils = new Utils();
			this.conn = DriverManager.getConnection(database.getDbURL() + database.getDbName(), database.getDbID(), database.getDbPassword());
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	@Override
	public Integer low(CSRFParams params) {
		if (params == null) {
			return -1;
		}

		String passNew = params.getPassNew();
		String passConf = params.getPassConf();

		if (!utils.validatePassword(passNew) || !utils.validatePassword(passConf)) {
			return -3;
		}

		if (passNew != null && passNew.equals(passConf)) {
			passNew = passNew.replaceAll("'", "\\'");
			String hashedPassword = utils.hashPassword(passNew, database.getProperties().getProperty("pw.encrypt.algorithm"));

			String currentUser = params.getCurrentUser();
			String query = "UPDATE user SET userPassword = '" + hashedPassword + "' WHERE userID = '" + currentUser + "';";

			try {
				stmt = conn.createStatement();
				stmt.executeUpdate(query);

				return 1;
			} catch (Exception e) {
				e.printStackTrace();
			}
		}

		return -1;
	}

	@Override
	public Integer hard(CSRFParams params) {
		if (params == null) {
			return -1;
		}

		String referer = params.getReferer();
		String serverName = params.getServerName();

		if (referer != null && referer.contains(serverName)) {
			String passNew = params.getPassNew();
			String passConf = params.getPassConf();

			if (!utils.validatePassword(passNew) || !utils.validatePassword(passConf)) {
				return -3;
			}

			if (passNew != null && passNew.equals(passConf)) {
				passNew = passNew.replaceAll("'", "\\'");
				String hashedPassword = utils.hashPassword(passNew, database.getProperties().getProperty("pw.encrypt.algorithm"));

				String currentUser = params.getCurrentUser();
				String query = "UPDATE user SET userPassword = '" + hashedPassword + "' WHERE userID = '" + currentUser + "';";

				try {
					stmt = conn.createStatement();
					stmt.executeUpdate(query);

					return 1;
				} catch (Exception e) {
					e.printStackTrace();
				}
			}
		} else {
			return -2;
		}

		return -1;
	}
}
