package ExploitsUtil;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.IOException;
import java.io.PrintWriter;
import java.io.StringWriter;

import javax.servlet.RequestDispatcher;
import javax.servlet.ServletContext;
import javax.servlet.ServletOutputStream;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpServletResponseWrapper;

import ExploitsParam.FileInclusionParams;

public class FileInclusion implements ExploitLevel<String, FileInclusionParams> {
	private ServletContext context;
	private static final String BASE_PATH = "/exploits/fi/";
	
	public FileInclusion(ServletContext context) {
		this.context = context;
	}
	
	@Override
	public String low(FileInclusionParams params) {
		if (params == null || params.getRequest().getParameter("page") == null || params.getRequest().getParameter("page").isEmpty()) {
			return null;
		}
		
		try {
			String pages = params.getRequest().getParameter("page");
			
			String realPath = context.getRealPath(BASE_PATH);
		    File file = new File(realPath, pages);
			
			if (!file.exists()) {
				return null;
			}
			
			if (file.getName().endsWith(".jsp")) {
				RequestDispatcher dispatcher = context.getRequestDispatcher(BASE_PATH + pages);
				
				if (dispatcher != null) {
					StringWriter writer = new StringWriter();
					CustomServletResponse responseWrapper = new CustomServletResponse(params.getResposne(), writer);
					
					dispatcher.include(params.getRequest(), responseWrapper);
					return writer.toString();
				}
			} else {
				BufferedReader bufferedReader = new BufferedReader(new FileReader(file));
				StringBuilder result = new StringBuilder();
				String line;
				
				while ((line = bufferedReader.readLine()) != null) {
					result.append(line);
				}
				
				bufferedReader.close();
				
				return result.toString();
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		
		return null;
	}

	@Override
	public String hard(FileInclusionParams params) {
		if (params == null || params.getRequest().getParameter("page") == null || params.getRequest().getParameter("page").isEmpty()) {
			return null;
		}
		
		return null;
	}
	
	public class CustomServletResponse extends HttpServletResponseWrapper {
		private StringWriter writer = new StringWriter();
		
		public CustomServletResponse(HttpServletResponse response, StringWriter writer) {
			super(response);
			this.writer = writer;
		}
		
		@Override
		public PrintWriter getWriter() throws IOException {
			// TODO Auto-generated method stub
			return new PrintWriter(writer);
		}
		
		@Override
		public ServletOutputStream getOutputStream() throws IOException {
			// TODO Auto-generated method stub
			throw new UnsupportedOperationException("Not supported for custom response.");
		}
		
		public String getCapturedOutput() {
			return writer.toString();
		}
	}
}
