package ExploitsUtil;

import java.security.MessageDigest;

import ExploitsParam.JavaScriptAttackParams;

public class JavaScriptAttack implements ExploitLevel<String, JavaScriptAttackParams> {
	private final static String ANSWER_STATEMENT = "success";
	
    public JavaScriptAttack() {

    }

    @Override
    public String easy(JavaScriptAttackParams params) {
        return processRequest(params, true);
    }

    @Override
    public String hard(JavaScriptAttackParams params) {
        return processRequest(params, false);
    }

    private String processRequest(JavaScriptAttackParams params, boolean isEasy) {
        if (params == null || params.getRequest() == null) {
            return null;
        }

        if (params.getRequest().getMethod().equalsIgnoreCase("POST")
                && params.getRequest().getParameter("token") != null
                && params.getRequest().getParameter("phrase") != null) {

            String phrase = params.getRequest().getParameter("phrase");
            String token = params.getRequest().getParameter("token");

            String expectedToken = isEasy ? md5(rot13(ANSWER_STATEMENT)) : generateSomething(ANSWER_STATEMENT);

            if (phrase.equals(ANSWER_STATEMENT)) {
                return token.equals(expectedToken) ? "Well Done!" : "Invalid Token.";
            } else {
                return "You got the phrase wrong.";
            }
        }

        return null;
    }

    private String rot13(String input) {
        StringBuilder result = new StringBuilder();

        for (char c : input.toCharArray()) {
            if (c >= 'A' && c <= 'Z') {
                result.append((char) ('A' + (c - 'A' + 13) % 26));
            } else if (c >= 'a' && c <= 'z') {
                result.append((char) ('a' + (c - 'a' + 13) % 26));
            } else {
                result.append(c);
            }
        }

        return result.toString();
    }

    private String md5(String input) {
        try {
            MessageDigest messageDigest = MessageDigest.getInstance("MD5");
            byte[] hashBytes = messageDigest.digest(input.getBytes());

            StringBuilder hexStringBuilder = new StringBuilder();
            for (byte b : hashBytes) {
                String hex = Integer.toHexString(0xff & b);
                if (hex.length() == 1) {
                    hexStringBuilder.append('0');
                }

                hexStringBuilder.append(hex);
            }

            return hexStringBuilder.toString();
        } catch (Exception e) {
            e.printStackTrace();
        }

        return null;
    }

    private String generateSomething(String input) {
        String additional = "XX";
        String combined = additional + input + additional;

        return doSomething(combined);
    }

    private String doSomething(String input) {
        return new StringBuilder(input).reverse().toString();
    }
}