package ExploitsUtil;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.Statement;

import ExploitsParam.BruteForceParams;
import common.DataBase;
import utils.Utils;
/**
 * 코드 재사용성을 위한 interface를 사용하여 구현
 */
public class BruteForce implements ExploitLevel<Integer, BruteForceParams> {
	private DataBase database;
	private Utils utils;
	private Connection conn;
	private Statement stmt;
	private ResultSet rs;
	
	public BruteForce() {
		try {
			this.database = new DataBase();
			this.utils = new Utils();
			this.conn = DriverManager.getConnection(database.getDbURL() + database.getDbName(), database.getDbID(), database.getDbPassword());
			
		} catch (Exception e) {
			e.printStackTrace();
		}
	}
	
	@Override
	public Integer easy(BruteForceParams params) {
		if (params == null) {
			return -1;
		}
		
		String hashedPassword = utils.hashPassword(params.getUserPassword(), database.getProperties().getProperty("pw.encrypt.algorithm"));
		
		try {
			stmt = conn.createStatement();
			
			String query = "SELECT * FROM user WHERE userID = '" + params.getUserID() + "' AND userPassword = '" + hashedPassword + "'";
			rs = stmt.executeQuery(query);
			return rs.next() ? 1 : -1;
		} catch (Exception e) {
			e.printStackTrace();
		} finally {
			try {
				if (rs != null) rs.close();
				if (stmt != null) stmt.close();
				if (conn != null) conn.close();
			} catch (Exception e) {
				e .printStackTrace();
			}
		}
		
		return -1;
	}

	@Override
	public Integer hard(BruteForceParams params) {
		if (params == null) {
			return -1;
		}
		
		String userID = params.getUserID();
		String password = params.getUserPassword();
		
		// SQL Injection 방지
		userID = userID.replaceAll("'", "''");
		password = password.replaceAll("'", "''");
		
		String hashedPassword = utils.hashPassword(password, database.getProperties().getProperty("pw.encrypt.algorithm"));
		
		try {
			stmt = conn.createStatement();
			
			String query = "SELECT * FROM user WHERE userID = '" + userID + "' AND userPassword = '" + hashedPassword + "'";
			rs = stmt.executeQuery(query);
			return rs.next() ? 1 : -1;
		} catch (Exception e) {
			e.printStackTrace();
		} finally {
			try {
				if (rs != null) rs.close();
				if (stmt != null) stmt.close();
				if (conn != null) conn.close();
			} catch (Exception e) {
				e .printStackTrace();
			}
		}
		
		return -1;
	}
}